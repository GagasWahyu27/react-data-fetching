import Head from "next/head";
import {
  Button,
  Container,
  FormControl,
  FormLabel,
  Heading,
  Input,
  Spinner,
  Table,
  Tbody,
  Td,
  Th,
  Thead,
  Tr,
  useDisclosure,
  useToast,
  VStack,
} from "@chakra-ui/react";
import { Product } from "@/lib/type";
import { useFormik } from "formik";
import { useEffect, useRef, useState } from "react";
import ModalConfirm from "./components/ModalConfirm";
import {
  useFetchProducts,
  useCreateProduct,
  useEditProduct,
  useDeleteProduct,
} from "@/features/products/index";
// import { useFetchProducts } from "@/features/products/useFetchProducts";
// import { useCreateProduct } from "@/features/products/useCreateProduct";
// import { useEditProduct } from "@/features/products/useEditProduct";
// import { useDeleteProduct } from "@/features/products/useDeleteProduct";

export default function Home() {
  const toast = useToast();
  const { isOpen, onOpen, onClose } = useDisclosure();
  const [selectedProductId, setSelectedProductId] = useState<number | null>(
    null
  );
  const [editing, setEditing] = useState<boolean>(false);
  const cancelRef = useRef<HTMLButtonElement>(null);

  const formik = useFormik<Product>({
    initialValues: {
      id: 0,
      name: "",
      price: 0,
      description: "",
      image: "",
    },
    onSubmit: () => {
      const { id, name, price, description, image } = formik.values;
      if (id) {
        editProduct({
          id,
          name,
          price,
          description,
          image,
        });
      } else {
        createProduct({
          name,
          price,
          description,
          image,
        });
      }
    },
  });

  const {
    data,
    isLoading: isProductLoading,
    refetch: refetchProducts,
    isError: isProductFetchingError,
  } = useFetchProducts();
  const products: Product[] = data?.data ?? [];

  useEffect(() => {
    if (isProductFetchingError) {
      toast({
        id: "fetch_product_error",
        title: "Error while fetching products",
        status: "error",
        duration: 5000,
        position: "top",
      });
    }
  }, [isProductFetchingError]);

  const { mutate: createProduct, isPending: isProductPending } =
    useCreateProduct({
      onSuccess: () => {
        formik.resetForm();
        refetchProducts();
        toast({
          id: "create_product_popup",
          title: "Product added successfully",
          status: "success",
          duration: 3000,
          position: "top",
        });
      },
    });

  const { mutate: editProduct, isPending: isProductEditPending } =
    useEditProduct({
      onSuccess: () => {
        formik.resetForm();
        refetchProducts();
        toast({
          id: "edit_product_popup",
          title: "Product updated successfully",
          status: "success",
          duration: 3000,
          position: "top",
        });
        setEditing(false);
      },
    });

  const { mutate: deleteProduct, isPending: isProductDeletePending } =
    useDeleteProduct({
      onSuccess: () => {
        refetchProducts();
        toast({
          id: "delete_product_popup",
          title: "Product deleted successfully",
          status: "success",
          duration: 3000,
          position: "top",
        });
      },
    });

  const onEditClick = (body: Product) => {
    const { id, name, price, description, image } = body;
    formik.setFieldValue("id", id);
    formik.setFieldValue("name", name);
    formik.setFieldValue("price", price);
    formik.setFieldValue("description", description);
    formik.setFieldValue("image", image);
    setEditing(true);
  };

  const handleCancelEdit = () => {
    formik.resetForm();
    setEditing(false);
  };

  const handleDelete = (id: number) => {
    setSelectedProductId(id);
    onOpen();
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Container maxW="container.lg" px={4}>
          <Heading my={6}>CRUD Product</Heading>
          <ModalConfirm
            isOpen={isOpen}
            onClose={onClose}
            onConfirm={() => {
              if (selectedProductId !== null) deleteProduct(selectedProductId);
            }}
            cancelRef={cancelRef}
            dialogHeader="Delete Product"
            dialogBody="Are you sure you want to delete this product?"
          />
          <Table mb={6}>
            <Thead>
              <Tr>
                <Th>Id</Th>
                <Th>Name</Th>
                <Th>Price</Th>
                <Th>Description</Th>
                <Th colSpan={2}>Action</Th>
              </Tr>
            </Thead>
            <Tbody>
              {isProductLoading ? (
                <Tr>
                  <Td colSpan={5} textAlign="center">
                    <Spinner />
                  </Td>
                </Tr>
              ) : (
                products.map((product) => {
                  return (
                    <Tr key={product.id}>
                      <Td>{product.id}</Td>
                      <Td>{product.name}</Td>
                      <Td>{product.description}</Td>
                      <Td>{product.price}</Td>
                      <Td>
                        <Button
                          type="submit"
                          onClick={() => {
                            onEditClick(product);
                          }}
                          colorScheme="cyan"
                        >
                          Edit
                        </Button>
                      </Td>
                      <Td>
                        <Button
                          type="submit"
                          onClick={() => {
                            handleDelete(product.id);
                          }}
                          colorScheme="red"
                        >
                          Delete
                        </Button>
                      </Td>
                    </Tr>
                  );
                })
              )}
            </Tbody>
          </Table>

          <form onSubmit={formik.handleSubmit}>
            <VStack spacing={3}>
              {editing && (
                <FormControl>
                  <FormLabel>Product Id</FormLabel>
                  <Input
                    onChange={formik.handleChange}
                    type="number"
                    name="id"
                    value={formik.values.id}
                    isDisabled={true}
                  />
                </FormControl>
              )}
              <FormControl>
                <FormLabel>Product Name</FormLabel>
                <Input
                  onChange={formik.handleChange}
                  type="text"
                  name="name"
                  value={formik.values.name}
                />
              </FormControl>
              <FormControl>
                <FormLabel>Price</FormLabel>
                <Input
                  onChange={formik.handleChange}
                  type="number"
                  name="price"
                  value={formik.values.price}
                />
              </FormControl>
              <FormControl>
                <FormLabel>Description</FormLabel>
                <Input
                  onChange={formik.handleChange}
                  type="text"
                  name="description"
                  value={formik.values.description}
                />
              </FormControl>
              <FormControl>
                <FormLabel>Image</FormLabel>
                <Input
                  onChange={formik.handleChange}
                  type="text"
                  name="image"
                  value={formik.values.image}
                />
              </FormControl>
              {isProductPending || isProductEditPending ? (
                <Button isDisabled={isProductPending || isProductEditPending}>
                  <Spinner>Loading</Spinner>
                </Button>
              ) : (
                <Button type="submit">Submit Product</Button>
              )}
              {editing &&
                (isProductEditPending ? (
                  <Button isDisabled={isProductEditPending}>
                    <Spinner>Loading</Spinner>
                  </Button>
                ) : (
                  <Button onClick={handleCancelEdit} colorScheme="red">
                    Cancel Edit
                  </Button>
                ))}
            </VStack>
          </form>
        </Container>
      </main>
    </>
  );
}
